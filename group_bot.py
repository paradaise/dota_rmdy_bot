"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Dota 2
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
"""
import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from config import TELEGRAM_TOKEN
from statistics import (
    get_user_stats, update_user_stats, get_leaderboard, get_lvm_leaderboard,
    get_group_summary, get_user_display_name, find_user_by_username
)
from fun_commands import get_funny_response

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_PARTY_SIZE, CHOOSING_LANE = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã", callback_data="stats")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–∑–æ–≤", callback_data="challenge")],
        [InlineKeyboardButton("üé™ –ó–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="fun")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dota 2 Group Bot!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        await show_group_stats(query)
    elif query.data == "challenge":
        await show_random_challenge(query)
    elif query.data == "fun":
        await show_fun_menu(query)
    elif query.data.startswith("fun_"):
        await handle_fun_command(query)
    elif query.data == "back":
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º start —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await start(update, context)

async def show_group_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        summary = get_group_summary()
        logger.info(f"–°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {summary}")
        
        leaderboard = get_leaderboard()
        logger.info(f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω: {len(leaderboard)} –∏–≥—Ä–æ–∫–æ–≤")
        
        lvm_leaderboard = get_lvm_leaderboard()
        logger.info(f"LVM –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω: {len(lvm_leaderboard)} –∏–≥—Ä–æ–∫–æ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Markdown)
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:*\n\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {summary['total_games']}\n"
            f"üèÜ –ü–æ–±–µ–¥: {summary['total_wins']}\n"
            f"üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {summary['total_losses']}\n"
            f"üìà –í–∏–Ω—Ä–µ–π—Ç –≥—Ä—É–ø–ø—ã: {summary['group_winrate']:.1f}%\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {summary['active_players']}\n"
            f"‚≠ê –í—Å–µ–≥–æ MVP: {summary['total_mvp']}\n"
            f"üíÄ –í—Å–µ–≥–æ LVM: {summary['total_lvm']}\n\n"
        )
        
        logger.info("–ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        if leaderboard:
            stats_text += "üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n"
            for i, (user_id, stats) in enumerate(leaderboard[:5], 1):
                display_name = get_user_display_name(user_id)
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ {i}: {display_name}")
                # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                stats_text += f"{i}. {display_name}: {stats['winrate']:.1f}% ({stats['total_games']} –∏–≥—Ä)\n"
        
        logger.info("–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º LVM —Å–ø–∏—Å–æ–∫
        if lvm_leaderboard:
            stats_text += "\nüíÄ *LVM —Å–ø–∏—Å–æ–∫:*\n"
            for i, (user_id, stats) in enumerate(lvm_leaderboard[:5], 1):
                display_name = get_user_display_name(user_id)
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LVM –∏–≥—Ä–æ–∫–∞ {i}: {display_name}")
                # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                stats_text += f"{i}. {display_name}: {stats['lvm_count']} LVM ({stats['total_games']} –∏–≥—Ä)\n"
        
        logger.info("LVM —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {stats_text[:200]}...")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

async def show_random_challenge(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è Dota 2"""
    challenges = [
        "üéØ **–í—ã–∑–æ–≤: –¢–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞!**\n–ò–≥—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∏–∫–∞–∫–∏—Ö –∫–µ—Ä—Ä–∏!",
        "‚ö° **–í—ã–∑–æ–≤: –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –¥–æ 20 –º–∏–Ω—É—Ç—ã. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å!",
        "üõ°Ô∏è **–í—ã–∑–æ–≤: –¢–∞–Ω–∫-–∫–æ–º–∞–Ω–¥–∞!**\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ–µ–≤ —Å –≤—ã—Å–æ–∫–∏–º HP –∏ –±—Ä–æ–Ω–µ–π. –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–µ–∫–æ–≤!",
        "üé™ **–í—ã–∑–æ–≤: –†–∞–Ω–¥–æ–º –≥–µ—Ä–æ–∏!**\n–ö–∞–∂–¥—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–µ—Ä–æ—è. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ—Ç–µ–Ω–∑–∏–π!",
        "üî• **–í—ã–∑–æ–≤: –¢–æ–ª—å–∫–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω!**\n–ò–≥—Ä–∞–π—Ç–µ –≥–µ—Ä–æ—è–º–∏ —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —É—Ä–æ–Ω–æ–º. –ù–∏–∫–∞–∫–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫!",
        "‚öîÔ∏è **–í—ã–∑–æ–≤: –î—É—ç–ª–∏!**\n–ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å –≥–µ—Ä–æ—è-–¥—É—ç–ª—è–Ω—Ç–∞ (PA, Jugg, LC, etc.)",
        "üåô **–í—ã–∑–æ–≤: –ù–æ—á–Ω—ã–µ –≥–µ—Ä–æ–∏!**\n–ò–≥—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—á—å—é",
        "‚òÄÔ∏è **–í—ã–∑–æ–≤: –î–Ω–µ–≤–Ω—ã–µ –≥–µ—Ä–æ–∏!**\n–ò–≥—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–Ω–µ–º",
        "üé≠ **–í—ã–∑–æ–≤: –û–¥–∏–Ω —Å—Ç–∏–ª—å!**\n–í—Å–µ –±–µ—Ä—É—Ç –≥–µ—Ä–æ–µ–≤ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–ª—è (gank, push, farm, etc.)",
        "üîÑ **–í—ã–∑–æ–≤: –°–º–µ–Ω–∞ —Ä–æ–ª–µ–π!**\n–ö–µ—Ä—Ä–∏ –∏–≥—Ä–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —Å–∞–ø–ø–æ—Ä—Ç –∏–≥—Ä–∞–µ—Ç –∫–µ—Ä—Ä–∏!",
        "üé≤ **–í—ã–∑–æ–≤: –°–ª—É—á–∞–π–Ω–∞—è –ª–∏–Ω–∏—è!**\n–ö–∞–∂–¥—ã–π –∏–≥—Ä–∞–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –ª–∏–Ω–∏–∏, –Ω–µ —Å–≤–æ–µ–π –æ–±—ã—á–Ω–æ–π",
        "üíé **–í—ã–∑–æ–≤: –†–µ–¥–∫–∏–µ –≥–µ—Ä–æ–∏!**\n–ò–≥—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–¥–∫–æ –≤—ã–±–∏—Ä–∞—é—Ç",
        "üèÜ **–í—ã–∑–æ–≤: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–µ—Ä–æ–∏!**\n–ò–≥—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏",
        "‚ö° **–í—ã–∑–æ–≤: –ë—ã—Å—Ç—Ä—ã–π —Ñ–∞—Ä–º!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–±—Ä–∞—Ç—å 1000 GPM –∫ 15 –º–∏–Ω—É—Ç–µ",
        "üõ°Ô∏è **–í—ã–∑–æ–≤: –ó–∞—â–∏—Ç–Ω–∞—è –∏–≥—Ä–∞!**\n–ò–≥—Ä–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –º–∏–Ω–∏–º—É–º —Å–º–µ—Ä—Ç–µ–π"
    ]
    
    import random
    challenge = random.choice(challenges)
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–æ–≤—ã–π –≤—ã–∑–æ–≤", callback_data="challenge")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        challenge,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_fun_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–±–∞–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    keyboard = [
        [InlineKeyboardButton("üî• –†–æ—É—Å—Ç", callback_data="fun_roast")],
        [InlineKeyboardButton("üåü –ü–æ—Ö–≤–∞–ª–∞", callback_data="fun_praise")],
        [InlineKeyboardButton("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="fun_motivate")],
        [InlineKeyboardButton("üò§ –û–±–≤–∏–Ω–µ–Ω–∏–µ", callback_data="fun_blame")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé™ *–ó–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_fun_command(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–∞–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    command_type = query.data.split("_")[1]
    response = get_funny_response(command_type)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ï—â–µ —Ä–∞–∑", callback_data=f"fun_{command_type}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="fun")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"{response}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        summary = get_group_summary()
        leaderboard = get_leaderboard()
        lvm_leaderboard = get_lvm_leaderboard()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:*\n\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {summary['total_games']}\n"
            f"üèÜ –ü–æ–±–µ–¥: {summary['total_wins']}\n"
            f"üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {summary['total_losses']}\n"
            f"üìà –í–∏–Ω—Ä–µ–π—Ç –≥—Ä—É–ø–ø—ã: {summary['group_winrate']:.1f}%\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {summary['active_players']}\n"
            f"‚≠ê –í—Å–µ–≥–æ MVP: {summary['total_mvp']}\n"
            f"üíÄ –í—Å–µ–≥–æ LVM: {summary['total_lvm']}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        if leaderboard:
            stats_text += "üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n"
            for i, (user_id, stats) in enumerate(leaderboard[:5], 1):
                display_name = get_user_display_name(user_id)
                stats_text += f"{i}. {display_name}: {stats['winrate']:.1f}% ({stats['total_games']} –∏–≥—Ä)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º LVM —Å–ø–∏—Å–æ–∫
        if lvm_leaderboard:
            stats_text += "\nüíÄ *LVM —Å–ø–∏—Å–æ–∫:*\n"
            for i, (user_id, stats) in enumerate(lvm_leaderboard[:5], 1):
                display_name = get_user_display_name(user_id)
                stats_text += f"{i}. {display_name}: {stats['lvm_count']} LVM ({stats['total_games']} –∏–≥—Ä)\n"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def win_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–±–µ–¥—ã"""
    user = update.effective_user
    user_id = str(user.id)
    username = user.username
    first_name = user.first_name
    
    update_user_stats(user_id, 'win', username=username, first_name=first_name)
    
    response = "üèÜ –ü–æ–±–µ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!"
    
    await update.message.reply_text(response)

async def lose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lose"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    update_user_stats(user_id, 'loss', username=username, first_name=first_name)
    
    response = "üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!"
    
    await update.message.reply_text(response)

async def mvp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mvp"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç @username
    if context.args and context.args[0].startswith('@'):
        target_username = context.args[0]
        target_user_id = find_user_by_username(target_username)
        if target_user_id:
            user_id = target_user_id
            target_user_stats = get_user_stats(target_user_id)
            username = target_user_stats.get('username')
            first_name = target_user_stats.get('first_name')
            response = f"‚≠ê MVP –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–≥—Ä–æ–∫—É {target_username}! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!"
        else:
            response = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
            await update.message.reply_text(response)
            return
    else:
        response = "‚≠ê –í—ã –ø–æ–ª—É—á–∏–ª–∏ MVP! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!"
    
    update_user_stats(user_id, 'mvp', username=username, first_name=first_name)
    await update.message.reply_text(response)

async def lvm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lvm"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç @username
    if context.args and context.args[0].startswith('@'):
        target_username = context.args[0]
        target_user_id = find_user_by_username(target_username)
        if target_user_id:
            user_id = target_user_id
            target_user_stats = get_user_stats(target_user_id)
            username = target_user_stats.get('username')
            first_name = target_user_stats.get('first_name')
            response = f"üíÄ LVM –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–≥—Ä–æ–∫—É {target_username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—É—á—à–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
        else:
            response = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
            await update.message.reply_text(response)
            return
    else:
        response = "üíÄ –í—ã –ø–æ–ª—É—á–∏–ª–∏ LVM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—É—á—à–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
    
    update_user_stats(user_id, 'lvm', username=username, first_name=first_name)
    await update.message.reply_text(response)

# –ó–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username
async def roast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–æ—É—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username"""
    if context.args:
        target_username = context.args[0].replace("@", "")
        response = get_funny_response("roast", target_username)
    else:
        response = get_funny_response("roast")
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def praise_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ—Ö–≤–∞–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username"""
    if context.args:
        target_username = context.args[0].replace("@", "")
        response = get_funny_response("praise", target_username)
    else:
        response = get_funny_response("praise")
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def motivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username"""
    if context.args:
        target_username = context.args[0].replace("@", "")
        response = get_funny_response("motivate", target_username)
    else:
        response = get_funny_response("motivate")
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def blame_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ–±–≤–∏–Ω–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username"""
    if context.args:
        target_username = context.args[0].replace("@", "")
        response = get_funny_response("blame", target_username)
    else:
        response = get_funny_response("blame")
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üéÆ *Dota 2 Group Bot - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
/win - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥—É
/lose - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
/mvp [@username] - –ù–∞–∑–Ω–∞—á–∏—Ç—å MVP (—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É)
/lvm [@username] - –ù–∞–∑–Ω–∞—á–∏—Ç—å LVM (—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É)

*–ó–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/roast [@username] - –†–æ—É—Å—Ç (—Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
/praise [@username] - –ü–æ—Ö–≤–∞–ª–∞ (—Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
/motivate [@username] - –ú–æ—Ç–∏–≤–∞—Ü–∏—è (—Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
/blame [@username] - –û–±–≤–∏–Ω–µ–Ω–∏–µ (—Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)

*–ü—Ä–∏–º–µ—Ä—ã:*
/mvp @username - –Ω–∞–∑–Ω–∞—á–∏—Ç—å MVP –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
/roast @username - —Ä–æ—É—Å—Ç–Ω—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("win", win_command))
    application.add_handler(CommandHandler("lose", lose_command))
    application.add_handler(CommandHandler("mvp", mvp_command))
    application.add_handler(CommandHandler("lvm", lvm_command))
    
    # –ó–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("roast", roast_command))
    application.add_handler(CommandHandler("praise", praise_command))
    application.add_handler(CommandHandler("motivate", motivate_command))
    application.add_handler(CommandHandler("blame", blame_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main() 