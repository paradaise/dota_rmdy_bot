from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from statistics import *
from fun_commands import get_fun_response
import logging
import os
from dotenv import load_dotenv

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await update.message.reply_text(
        "üéÆ <b>Rmdy Lobby Stats Bot</b>\n\n"
        "<i>–ü–æ–∫–∞ —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ª–æ–±–±–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å MVP/LVP –∏–≥—Ä–æ–∫–∞–º!</i>\n\n"
        "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥</b>\n",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def win_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    record_game_result(is_win=True)
    await update.message.reply_text(
        "üèÜ <b>–õ–µ–≥–µ–Ω–¥—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>\n\n"
        "<b>–ü–æ–±–µ–¥–∞ –ª–æ–±–±–∏ –∑–∞–ø–∏—Å–∞–Ω–∞!</b>",
        parse_mode='HTML'
    )

async def lose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    record_game_result(is_win=False)
    await update.message.reply_text(
        "üíÄ <b>–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!</b>\n\n"
        "<i>MMR –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ —É—Ö–æ–¥–∏—Ç. –°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –ª—é–¥–∏ –∑–¥–µ—Å—å, –≤ —ç—Ç–æ–º —á–∞—Ç–µ!</i>\n\n"
        "<b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–±–±–∏ –∑–∞–ø–∏—Å–∞–Ω–æ!</b>",
        parse_mode='HTML'
    )

async def handle_award_command(update: Update, context: ContextTypes.DEFAULT_TYPE, award_type: str):
    if not context.args or not context.args[0].startswith('@'):
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /{award_type} @username)",
            parse_mode='HTML'
        )
        return
    
    username = context.args[0]
    if award_type == 'mvp':
        add_mvp(username)
        message = f"‚≠ê <b>MVP –Ω–∞–∑–Ω–∞—á–µ–Ω {username}!–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!</b>"
    else:
        add_lvp(username)
        message = f"üíÄ <b>LVP –Ω–∞–∑–Ω–∞—á–µ–Ω {username}!–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö xD!</b>"
    
    await update.message.reply_text(message, parse_mode='HTML')

async def mvp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_award_command(update, context, 'mvp')

async def lvp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_award_command(update, context, 'lvp')

async def handle_fun_command(update: Update, context: ContextTypes.DEFAULT_TYPE, cmd_type: str):
    if not context.args or not context.args[0].startswith('@'):
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /{cmd_type} @username)",
            parse_mode='HTML'
        )
        return
    
    target = context.args[0]
    response = get_fun_response(cmd_type, target)
    await update.message.reply_text(response, parse_mode='HTML')

async def toxic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_fun_command(update, context, 'toxic')

async def tip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_fun_command(update, context, 'tip')

async def motivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_fun_command(update, context, 'motivate')

async def blame_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_fun_command(update, context, 'blame')

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lobby = get_lobby_stats()
    mvp = get_mvp_leaderboard()
    lvp = get_lvp_leaderboard()
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–±–±–∏</b>\n\n"
        "üéÆ <i>–í—Å–µ–≥–æ –∏–≥—Ä:</i> <b>{}</b>\n"
        "üèÜ <i>–ü–æ–±–µ–¥:</i> <b>{}</b>\n"
        "üíÄ <i>–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</i> <b>{}</b>\n"
        "üìà <i>–í–∏–Ω—Ä–µ–π—Ç:</i> <b>{:.1f}%</b>\n"
    ).format(
        lobby['total_games'],
        lobby['wins'],
        lobby['losses'],
        lobby['winrate']
    )
    
    if mvp:
        text += "\n‚≠ê <b>–¢–æ–ø MVP:</b>\n" + "\n".join(
            "‚ñ´Ô∏è {}: <b>{}</b>".format(name, count) 
            for name, count in mvp
        )
    
    if lvp:
        text += "\n\nüíÄ <b>–¢–æ–ø LVP:</b>\n" + "\n".join(
            "‚ñ´Ô∏è {}: <b>{}</b>".format(name, count) 
            for name, count in lvp
        )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

async def contacts_command(message, context: ContextTypes.DEFAULT_TYPE):
    contacts_text = (
        "üìû <b>–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üîπ <a href='https://t.me/victor_gogolev'>Telegram</a>\n"
        "üîπ <a href='https://github.com/paradaise'>GitHub</a>\n"
        "üîπ <a href='https://vk.com/victor_gogolev'>VK</a>\n"
        "üîπ <a href='mailto:vgogolev.business@mail.ru'>Email</a>\n\n"
        "üí° –ü–∏—à–∏—Ç–µ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!"
    )
    await message.reply_text(contacts_text, parse_mode='HTML', disable_web_page_preview=True)

async def help_command(message, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üèÜ <b>/win</b> - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥—É –ª–æ–±–±–∏\n"
        "üíÄ <b>/lose</b> - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–±–±–∏\n\n"
        "‚≠ê <b>/mvp @–Ω–∏–∫</b> - –ù–∞–∑–Ω–∞—á–∏—Ç—å MVP –∏–≥—Ä–æ–∫—É\n"
        "üíÄ <b>/lvp @–Ω–∏–∫</b> - –ù–∞–∑–Ω–∞—á–∏—Ç—å LVP –∏–≥—Ä–æ–∫—É\n\n"
        "üé™ <b>–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ:</b>\n"
        "‚ñ´Ô∏è <b>/tip @–Ω–∏–∫</b> - –î–∞—Ç—å —Å–æ–≤–µ—Ç –∏–≥—Ä–æ–∫—É\n"
        "‚ñ´Ô∏è <b>/toxic @–Ω–∏–∫</b> - –¢–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        "‚ñ´Ô∏è <b>/motivate @–Ω–∏–∫</b> - –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
        "‚ñ´Ô∏è <b>/blame @–Ω–∏–∫</b> - –û–±–≤–∏–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n\n"
        "üìä <b>/stats</b> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚ùì <b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.reply_text(help_text, parse_mode='HTML')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ update.message –Ω–∞ message

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Update –Ω–∞ update
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "stats":
            await show_stats(update, context)
        elif query.data == "help":
            await help_command(query.message, context)
        elif query.data == "contacts":
            await contacts_command(query.message, context)
        elif query.data == "back":
            await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    load_dotenv()
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
    
    app = Application.builder().token(token).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", lambda u, c: help_command(u.message, c)))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("contacts", lambda u, c: contacts_command(u.message, c)))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–±–±–∏
    app.add_handler(CommandHandler("win", win_command))
    app.add_handler(CommandHandler("lose", lose_command))
    
    # –ù–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫–∞–º
    app.add_handler(CommandHandler("mvp", mvp_command))
    app.add_handler(CommandHandler("lvp", lvp_command))
    
    # –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("toxic", toxic_command))
    app.add_handler(CommandHandler("tip", tip_command))
    app.add_handler(CommandHandler("motivate", motivate_command))
    app.add_handler(CommandHandler("blame", blame_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.run_polling()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update.callback_query:
        await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

if __name__ == '__main__':
    main()